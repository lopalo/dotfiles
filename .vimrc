if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

set rtp+=~/.vim

call plug#begin('~/.vim/plugged')

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'nordtheme/vim'
Plug 'ervandew/supertab'
Plug 'luochen1990/rainbow'
Plug 'w0rp/ale'
Plug 'scrooloose/nerdtree'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-obsession'
Plug 'sbdchd/neoformat'
Plug 'jpalardy/vim-slime'

Plug 'arzg/vim-rust-syntax-ext'

call plug#end()
":PlugInstall


set nocompatible                       "use Vim settings, rather than Vi settings
set incsearch                          "do incremental searching
set expandtab                          "enter spaces when tab is pressed
set textwidth=1200                     "break lines when line length increases
set autoindent                         "copy indent from current line when starting a new line
set backspace=indent,eol,start         "make backspaces more powerfull
autocmd BufWritePre * :%s/\s\+$//e     "remove trailing spaces

"visual
set termguicolors
colorscheme nord
set cursorline                               "line cursor
set number                                   "show line numbers
syntax on                                    "syntax highlighting
set showcmd                                  "show (partial) command in status line
set colorcolumn=82                           "marker

"disable the mouse.
if has('mouse')
   set mouse=
endif

"sets how many lines of history VIM has to remember
set history=700

"maintain undo history between sessions
set undofile
set undodir=~/.vim/undodir

"enable filetype plugins
filetype plugin on
filetype indent on

"make these commonly mistyped commands still work
command! WQ wq
command! Wq wq
command! Wqa wqa
command! W w
command! Q q

"use // to search selected text in visual mode
vnoremap // y/\V<C-R>=escape(@",'/\')<CR><CR>

"use :C to clear hlsearch
command! C nohlsearch

"use K in command mode to split line
nnoremap K i<CR><Esc>

let mapleader="["
let maplocalleader="["

"set to auto read when a file is changed from the outside
set autoread

"ignore case when searching
set ignorecase

"case-insensitive filename completion
set wildignorecase

"ignore these file extensions
set wildignore +=*.pyc,*.o,*.hi,*.jpg,*.png,node_modules
let g:netrw_list_hide = "\.pyc$,\.o$,\.hi$,\.jpg$,\.png$"

"when searching try to be smart about cases
set smartcase

"highlight search results
set hlsearch

"show matching brackets when text indicator is over them
set showmatch

"statusline settings
set laststatus=2
let g:airline_theme='nord'

"no swap of files
set nobackup
set nowritebackup
set noswapfile

let g:AutoPairs = {'(':')', '[':']', '{':'}','"':'"', '```':'```', '"""':'"""', "'''":"'''"}

"path to a file that is generated by *-ctags command
set tags=.ctags

let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files']

let g:ale_set_highlights = 0
nmap <silent> <leader>e :ALEToggle<CR>
nmap <silent> <C-j> <Plug>(ale_next_wrap)
nmap <silent> <C-k> <Plug>(ale_previous_wrap)

noremap == :Neoformat<CR>

let g:rainbow_active = 1

let g:slime_target = "tmux"


"use project-specific .vimrc files
set exrc
set secure


"ALE settings
let g:ale_linters = {
\    'rust': ['cargo', 'analyzer'],
\    'python': ['pyright'],
\}
let g:ale_completion_enabled = 1
let g:ale_floating_preview = 1
let g:ale_use_neovim_diagnostics_api = 1

autocmd FileType * nnoremap <leader>d :ALEGoToDefinition<CR>
autocmd FileType * nnoremap <leader>t :ALEGoToTypeDefinition<CR>
autocmd FileType * nnoremap <leader>i :ALEGoToImplementation<CR>
autocmd FileType * nnoremap <leader>n :ALEFindReferences<CR>
autocmd FileType * nnoremap <leader>r :ALERename<CR>
autocmd FileType * nnoremap <leader>h :ALEHover<CR>


"##### Rust #####

"Install 'rust-analyzer'
"Run 'rustup component add rust-src' to add the source code of Rust's std library

let g:neoformat_enabled_rust = ['rustfmt']

call ale#Set('rust_cargo_default_feature_behavior', 'all')
call ale#Set('rust_cargo_check_all_targets', 1)

call ale#Set('rust_analyzer_executable', 'ra-multiplex')
call ale#Set('rust_analyzer_config', {
\    'cargo': {
\        'features': 'all',
\        'allTargets': 'true'
\    },
\    'checkOnSave': v:false,
\    'procMacro': {
\        'enable': v:true
\    }
\})

"##### Rust #####

"##### Python #####

"Install 'Pyright': pip install pyright

let g:neoformat_enabled_python = ['black']

"##### Python #####

"##### Terraform #####

let g:neoformat_enabled_terraform = ['terraform']
let g:neoformat_enabled_tf = ['tf']

"##### Terraform #####

